"use strict";

exports.__esModule = true;
exports.setup = setup;
exports.teardown = teardown;

var _jestDevServer = require("jest-dev-server");

var _puppeteer = _interopRequireDefault(require("puppeteer"));

var _chalk = _interopRequireDefault(require("chalk"));

var _readConfig = _interopRequireDefault(require("./readConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
let browser;

async function setup(jestConfig) {
  const config = await (0, _readConfig.default)();

  if (config.connect) {
    browser = await _puppeteer.default.connect(config.connect);
  } else {
    browser = await _puppeteer.default.launch(config.launch);
  }

  process.env.PUPPETEER_WS_ENDPOINT = browser.wsEndpoint();
  if (jestConfig.watch || jestConfig.watchAll) return;

  if (config.server) {
    try {
      await (0, _jestDevServer.setup)(config.server);
    } catch (error) {
      if (error.code === _jestDevServer.ERROR_TIMEOUT) {
        console.log('');
        console.error(_chalk.default.red(error.message));
        console.error(_chalk.default.blue(`\n☝️ You can set "server.launchTimeout" in jest-puppeteer.config.js`));
        process.exit(1);
      }

      if (error.code === _jestDevServer.ERROR_NO_COMMAND) {
        console.log('');
        console.error(_chalk.default.red(error.message));
        console.error(_chalk.default.blue(`\n☝️ You must set "server.command" in jest-puppeteer.config.js`));
        process.exit(1);
      }

      throw error;
    }
  }
}

async function teardown(jestConfig) {
  if (!jestConfig.watch && !jestConfig.watchAll) {
    await (0, _jestDevServer.teardown)();
    const config = await (0, _readConfig.default)();

    if (config.connect) {
      await browser.disconnect();
    } else {
      await browser.close();
    }
  }
}